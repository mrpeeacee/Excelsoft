✅ What is Linux?
Linux is an open-source, Unix-like operating system kernel used to build distributions like Ubuntu, CentOS, and Amazon Linux. It powers cloud servers, Docker containers, Kubernetes nodes, CI/CD pipelines, etc.

Scenario View:
You're deploying a microservice on AWS EC2. You use an Amazon Linux AMI—because it's lightweight and integrates with the AWS CLI. You use commands like systemctl, journalctl, yum, and file permissions (chmod, chown)—all enabled by Linux.


✅ Linux Boot Process (Real-Time Breakdown)
When a Linux system boots:

BIOS/UEFI – Hardware check & looks for bootable disk.

MBR/GPT – Loads the bootloader (like GRUB).

GRUB – Selects and loads the Linux kernel.

Kernel – Initializes hardware and mounts the root filesystem.

Init/Systemd – Starts system services (sshd, docker, etc.).

Login – Shell/login manager appears (like tty, GUI, or SSH-ready).

Scenario:
You’re troubleshooting why a VM doesn’t SSH. You check boot logs via the AWS EC2 Console > "Get System Log", and you notice the boot hangs at "Started Network Manager." You suspect a corrupted network unit file in /etc/systemd/system/.



✅ Linux File System Structure (Key Paths You Actually Use)
Path	Purpose	                DevOps Use Case
/	Root directory	        Everything starts here.
/bin	Essential binaries	Commands like ls, cp, mv.
/etc	Config files	        Nginx (/etc/nginx/nginx.conf), Docker (/etc/docker/).
/var	Variable data	        Logs in /var/log/, Jenkins jobs.
/home	User directories	CI users like /home/jenkins.
/tmp	Temporary files	        Debugging or temporary deployments.
/opt	Optional software	Often used for custom app installs.
/dev, /proc, /sys	        Kernel-related	Useful for monitoring or debugging system-level behavior.

Scenario:
Your Jenkins build fails due to a “no space left on device” error. You SSH and run du -sh /var/*, finding /var/log bloated with old logs. You clean them or configure logrotate in /etc/logrotate.conf.


✅ What if useradd is unavailable?
If useradd is missing (rare but possible in minimal containers or stripped-down Linux), manually add user like this:

bash

# Step 1: Create user’s home directory
mkdir -p /home/devuser

# Step 2: Add an entry to /etc/passwd
echo 'devuser:x:1001:1001:DevOps User:/home/devuser:/bin/bash' >> /etc/passwd

# Step 3: Add group entry to /etc/group
echo 'devuser:x:1001:' >> /etc/group

# Step 4: Set password
echo 'devuser:YourStrongPassword' | chpasswd

# Step 5: Set correct permissions
chown -R devuser:devuser /home/devuser
Scenario:
You're building a Docker image based on Alpine Linux. The image fails because useradd doesn’t exist. You apply the above method in the Dockerfile to create a non-root user for security compliance.

✅ TL;DR (Cheat Sheet)

Linux	Open-source kernel, used in all infra layers.
Boot Process	BIOS → GRUB → Kernel → Systemd → Shell
File System	Know /etc, /var, /home, /opt, /tmp
Add User w/o useradd	Manually edit /etc/passwd, /etc/group, set home and password



✅ What is EC2?
Amazon EC2 (Elastic Compute Cloud) is a web service that provides resizable compute capacity (virtual servers) in the cloud. It's like renting a VM, but with flexibility to scale, automate, and integrate with other AWS services.

It supports multiple instance types (e.g., t2.micro, m5.large), OS options (Linux, Windows), EBS storage, and advanced features like auto-scaling, custom AMIs, and load balancing.

✅ My Experience with EC2 (Real-World Scenarios)
📌 1. Provisioning & Configuration

I’ve launched EC2 instances using both the AWS Console and Terraform.

Used Amazon Linux 2 and Windows Server 2019 AMIs for hosting applications.

Attached EBS volumes and configured mount points via fstab.

Automated bootstrapping with user data scripts (shell or PowerShell) to install packages like nginx, .NET Core, Docker, etc.

📌 2. Application Hosting

Deployed 3-tier applications: Angular frontend + .NET Core APIs hosted on IIS inside Windows EC2 instances.

Used Elastic IPs for static access and security groups for controlling traffic (e.g., opening only ports 80, 443, 22/3389).

📌 3. Automation

Created custom AMIs after hardening base instances with necessary tools and updates.

Used Auto Scaling Groups (ASG) and Launch Templates to scale backend APIs automatically.

Managed EC2 provisioning through Jenkins Pipelines + Ansible for consistent deployments.

📌 4. Monitoring & Cost Optimization

Integrated with CloudWatch for CPU, memory, and disk usage metrics.

Set up alarms for abnormal behaviors (e.g., high CPU or disk usage).

Scheduled start/stop scripts using Lambda + EventBridge for non-production EC2s to save cost.

📌 5. Troubleshooting

Resolved “Instance reachability failures” by checking system logs, boot diagnostics, or reverting to previous AMIs.

Used SSM (AWS Systems Manager) to connect to EC2 instances securely without exposing SSH ports.

✅ TL;DR – If Interviewer Asks:
"What is EC2?"

EC2 is AWS's virtual machine service that allows us to launch and manage compute instances. I've used EC2 extensively for deploying apps, automating infrastructure with Terraform and Jenkins, creating custom AMIs, setting up security groups, and cost-optimizing non-prod environments.


✅ Should You Know All EC2 Instance Types?
NO. You don’t need to memorize all, but you must know the major families and when to use them, especially for a DevOps/infra role.

Here's a quick cheat sheet tailored for interview prep:

Family	Use Case	Example Type
T (T2/T3/T4g)	General-purpose (burstable)	t3.medium for Jenkins master
M	Balanced CPU/Mem	m5.large for web/API servers
C	Compute optimized	c6g.large for backend services
R	Memory optimized	r5.large for Redis, in-memory DBs
I	Storage optimized	i3.large for high IOPS (e.g., ElasticSearch)
G/P/Inf	GPU/ML workloads	g4dn, p3 for ML
X	Extreme memory	SAP HANA etc.
H/D	HDD optimized	Data warehousing or large file processing

🧠 Interview-Pro Answer for "Do you know EC2 instance types?"
Yes, I’m familiar with the core instance families in EC2 and I usually choose based on the workload. For example, I use t3.micro for lightweight Jenkins nodes or test servers, m5.large for backend services, and c6g.large where I need better compute performance. I also prefer Graviton-based (t4g, c6g) for cost savings and performance when supported.

✅ TL;DR
Term	Summary
T2 Instance	Burstable, low-cost EC2 type with CPU credit system
Use When	You have unpredictable, spiky workloads with long idle times
Know All Types?	No, just know families and match them to use-cases



✅ What is AWS?
AWS (Amazon Web Services) is the leading cloud platform that offers on-demand IT resources like compute (EC2), storage (S3), networking (VPC), databases (RDS), and DevOps services (CodePipeline, CloudFormation, etc.).

Instead of managing physical servers, you spin up virtual infrastructure in seconds, scale on demand, and pay-as-you-go.

DevOps View:
I use AWS for provisioning CI/CD infrastructure (e.g., Jenkins on EC2), hosting containerized apps (ECS/EKS), storing artifacts in S3, and automating deployments using CodePipeline and CloudFormation.

✅ What is AWS CloudTrail?
AWS CloudTrail is a logging service that records every API call made in your AWS account.

🔍 What does it capture?
Who made the request (user/service role)

When it happened

What service was accessed

From where (IP address)

What action was performed (e.g., TerminateInstances, PutObject)

📁 Where are logs stored?
Logs are written to S3 buckets.

You can also integrate with CloudWatch Logs for alerting and real-time monitoring.

✅ Scenario-Based Example (How You’d Use It)
You notice an EC2 instance was terminated unexpectedly in production.
You go to CloudTrail and filter by TerminateInstances.
You find that a user devops-temp-user terminated it via the console.
You report the incident, revoke the user, and apply IAM policies and alerts.

✅ Real-World Use Cases
Use Case	Description
🛡️ Security Auditing	Track unauthorized access or privilege escalation
🧾 Compliance	Required for PCI-DSS, HIPAA, etc.
🐞 Troubleshooting	Understand who made infrastructure changes
🔁 Automation	Trigger Lambda functions from CloudTrail events
🔐 GuardDuty Input	CloudTrail logs are used by GuardDuty to detect anomalies

✅ TL;DR (Interview-Ready Summary)
Term	Summary
AWS	Cloud platform for on-demand infrastructure and DevOps services
CloudTrail	Service that logs all API calls in AWS for auditing, security, and compliance

Interview Pro Answer:

AWS is the cloud platform I use for provisioning and automating infrastructure. CloudTrail plays a critical role in security and auditing by logging every API call. I’ve used it to investigate unexpected instance terminations and IAM misuse by analyzing logs and integrating alerts via CloudWatch.


✅ What is AWS Lambda?
AWS Lambda is a serverless compute service that runs your code without provisioning or managing servers.

🧠 Key Concepts:
Trigger-based: Lambda is event-driven — runs automatically when triggered by S3, API Gateway, SNS, CloudWatch, etc.

Auto-scaling: Handles 1 or 10,000 requests per second — no need to scale manually.

Pay-per-use: You’re billed for actual execution time (in milliseconds).

Stateless: Each Lambda invocation is independent and isolated.

How would you manage environments provided by a client?

🧠 Interview Pro Answer:
AWS Lambda is a serverless compute service where I run code without managing servers. I’ve used it for automating tasks in CI/CD pipelines, resizing images via S3 events, and cleaning resources with cron jobs.
When managing client environments, I isolate them using environment-specific variables, tag resources, and automate deployments using Terraform or Serverless Framework. I also ensure IAM roles are scoped tightly and logs are segregated per environment for traceability.

✅ TL;DR
Concept	Summary
Lambda	Event-driven, serverless compute for on-demand execution
Environments	Isolate using env variables, naming, tags, and IAM
Deployments	Automate via Terraform/Serverless Framework
Security	Separate IAM roles per environment
Monitoring	Use CloudWatch with structured logs and alarms


By default, AWS allocates up to 5 Elastic IP addresses per AWS account per Region.


✅ What Platform Does AWS Provide?
AWS provides all three: IaaS, PaaS, and SaaS, but its core strength lies in IaaS and PaaS


🧱 1. IaaS – Infrastructure as a Service
You manage: OS, apps, networking (partially)
AWS provides: Virtual machines, networking, storage

Example Services	Use Case
EC2 (Elastic Compute Cloud)	Provision VMs to run apps
EBS (Elastic Block Store)	Attach volumes to EC2
VPC	Isolated cloud network
S3	Object storage (can be used both in IaaS and PaaS models)

✅ DevOps Application:
You spin up EC2 instances for Jenkins, Docker hosts, or self-managed Kubernetes clusters.

🛠️ 2. PaaS – Platform as a Service
You manage: Just your code
AWS provides: Runtime, scaling, OS patching, load balancing

Example Services	Use Case
Lambda	                Run code without managing servers (serverless)
Elastic Beanstalk	Deploy apps (Java, .NET, Python) with auto-scaling
Fargate	                Run containers without managing EC2
RDS	                Managed SQL databases (MySQL, PostgreSQL)
API Gateway	        Fully managed API front door

✅ DevOps Application:
You deploy containerized workloads with Fargate, or auto-deploy apps with Beanstalk using GitHub Actions or CodePipeline.

🧑‍💼 3. SaaS – Software as a Service
You use the app; everything is abstracted

AWS itself doesn't focus on SaaS apps for end-users, but some services have SaaS-like behavior.

Service	Acts Like SaaS
Amazon Chime	Video conferencing
Amazon QuickSight	BI & dashboards
AWS CodeGuru	AI code review (Dev-focused SaaS)
AWS WorkDocs	Document collaboration (SaaS-like)

✅ Note: AWS also enables SaaS development — many companies build their own SaaS platforms on AWS.

🎯 TL;DR — Interview Ready Summary
AWS provides IaaS (e.g., EC2, VPC), PaaS (e.g., Lambda, RDS, Beanstalk) and even SaaS-like services (like QuickSight).
As a DevOps engineer, I mostly work with IaaS to provision custom infra, and PaaS to deploy scalable, managed workloads with minimal ops overhead.

✅ How is data stored in S3 buckets

📦 Amazon S3 (Simple Storage Service) is an object storage service — it stores data as objects inside buckets.

🔑 Core Concepts:

| Component         | Description                                                     |
| ----------------- | --------------------------------------------------------------- |
| **Bucket**        | Top-level container for storing objects (globally unique name)  |
| **Object**        | Actual data stored (like a file)                                |
| **Key**           | Unique identifier for an object (like `backup/2024/report.csv`) |
| **Value**         | Actual binary/text content                                      |
| **Metadata**      | Key-value pairs (e.g., `Content-Type`, `Last-Modified`)         |
| **Version ID**    | If versioning is enabled, each change gets a unique version     |
| **Storage Class** | Determines durability/cost (e.g., Standard, Glacier)            |


🔐 Data Storage & Security

| Feature            | Description                                           |
| ------------------ | ----------------------------------------------------- |
| **Redundancy**     | Stored across **multiple AZs** automatically          |
| **Encryption**     | Server-side (`SSE-S3`, `SSE-KMS`) or client-side      |
| **Access Control** | IAM Policies, Bucket Policies, ACLs                   |
| **Versioning**     | Protects against accidental deletes                   |
| **Object Lock**    | WORM (write once read many) protection for compliance |

✅ TL;DR
| Concept                                                        | Summary |
| -------------------------------------------------------------- | ------- |
| S3 stores **objects** inside **buckets** using **unique keys** |         |
| Objects include **data, metadata, optional versioning**        |         |
| It’s flat, not hierarchical (folders = prefix tricks)          |         |
| DevOps uses: store artifacts, logs, backups, configs           |         |
| Secured via IAM, encrypted, versioned, and life-cycled         |         |


❓ Does AWS Support All Services in Every Region?
👉 No. AWS does not support all services in every region.
🧠 Why Not?
Service Maturity:
New AWS services usually launch in a few regions first (like us-east-1, us-west-2) before expanding.

Compliance & Regulations:
Some regions (like GovCloud, China) are restricted due to legal or data residency requirements.

Demand & Infrastructure:
Less-popular regions may not get high-demand services (like EKS, Bedrock, or Outposts) immediately.


| Service                      | Available In                                       |
| ---------------------------- | -------------------------------------------------- |
| **EC2**                      | ✅ All regions                                      |
| **S3**                       | ✅ All regions                                      |
| **Amazon Bedrock** (Gen AI)  | ❌ Limited regions (e.g., `us-east-1`)              |
| **SageMaker Studio Lab**     | ❌ Not region-specific (only in select countries)   |
| **Local Zones / Wavelength** | ❌ Only in metro cities (for low-latency edge apps) |
| **Control Tower**            | ✅ In many, but not *all* commercial regions        |

🚧 Real-World DevOps Impact:
You’re building a multi-region DR setup, but EKS isn’t supported in ap-south-2 → You must deploy to a different region.

You plan to use Lambda SnapStart, but it's only available in us-east-1 → Your CI/CD must be region-aware.

Your CloudFormation template fails in eu-central-2 because one resource type isn't supported yet.

✅ TL;DR – Interview-Ready Answer
No, AWS doesn't support all services in every region. Services often roll out in phases, starting with core regions like us-east-1. This affects how I design resilient, multi-region deployments. I always check service availability before planning infra rollouts, especially for specialized services like EKS, Bedrock, or Control Tower.



✅ What Are Triggers in AWS Lambda?
Triggers are AWS services or custom events that automatically invoke your Lambda function.

Think of triggers as the “who/what causes Lambda to run”.

🔁 Real-world analogy:
A trigger is like a doorbell. When someone presses it (trigger), it activates a chime (Lambda).
You didn’t press anything manually — it reacts automatically to an event.

| Trigger Source                      | What It Does            | Real-world Use Case                        |
| ----------------------------------- | ----------------------- | ------------------------------------------ |
| **S3**                              | On object upload/delete | Resize images, scan for malware, sync logs |
| **API Gateway**                     | On HTTP request         | Create REST APIs using Lambda as backend   |
| **EventBridge (CloudWatch Events)** | Scheduled or rule-based | Run nightly backups, cost analysis jobs    |
| **SNS**                             | On publish              | Process messages sent to a topic           |
| **SQS**                             | On message received     | Process batch jobs or queued data          |
| **DynamoDB Streams**                | On data change          | Audit logs or trigger secondary updates    |
| **Cognito**                         | On user sign-up/login   | Run custom logic on user events            |
| **CodeCommit**                      | On Git push             | Trigger CI jobs or notifications           |
| **Alexa / IoT / Step Functions**    | Specialized use cases   | Smart home, workflows, devices             |


❓ Is an Internet Gateway required for a VPC Peering Connection?
No. An Internet Gateway is not required for VPC peering.

🧠 Why?
VPC Peering is used for private communication between two VPCs.
It allows instances in one VPC to talk to instances in another over private AWS backbone, not the internet.

| Feature            | Description                                                                          |
| ------------------ | ------------------------------------------------------------------------------------ |
| **Scope**          | Works across same or different AWS regions                                           |
| **Traffic Path**   | Traffic flows through **AWS's internal network**, not public internet                |
| **Security**       | More secure, since no public exposure                                                |
| **No IGW Needed**  | Since it's all internal, an IGW is not required                                      |
| **What IS Needed** | You must configure **route tables** to direct traffic through the peering connection |


📌 DevOps Scenario
Two teams (Dev and QA) have separate VPCs:
vpc-dev (10.0.0.0/16) and vpc-qa (192.168.0.0/16).

You set up VPC peering between them.
Now you want an EC2 in Dev to SSH into an EC2 in QA.

✅ Required:
A VPC Peering connection

Route tables updated:

Dev VPC route: 192.168.0.0/16 → peering-xxxx

QA VPC route: 10.0.0.0/16 → peering-xxxx

Security groups allow traffic between them

❌ Not Required:
Internet Gateway

NAT Gateway

VPN

✅ TL;DR – Interview-Ready Summary
No, an Internet Gateway is not required for a VPC peering connection.
VPC peering uses AWS’s internal network to connect VPCs privately.
You just need to configure route tables and security groups properly.



🌿 What is Elastic Beanstalk?
Elastic Beanstalk is a Platform as a Service (PaaS) offered by AWS to deploy and manage applications without worrying about the underlying infrastructure.

You just upload your code, and AWS handles:

Provisioning EC2, Load balancing, Auto-scaling, Health monitoring, Deployment orchestration

🔧 Ways to Customize Elastic Beanstalk:

| Method                                          | Purpose                                                                     | DevOps Use Case                                   |
| ----------------------------------------------- | --------------------------------------------------------------------------- | ------------------------------------------------- |
| **`.ebextensions/`**                            | Add config files (YAML) to provision extra packages, users, cron jobs, etc. | Install `htop`, `nginx`, or tweak Apache settings |
| **Custom AMIs**                                 | Use your own pre-baked AMIs                                                 | Faster boot time, built-in dependencies           |
| **Environment Variables**                       | Set secrets/configs                                                         | `DB_HOST`, `ENV=prod`, etc.                       |
| **Procfile**                                    | Define custom process startup commands                                      | For Node/Flask/Gunicorn                           |
| **Multi-container Docker (Dockerrun.aws.json)** | Full container-level customization                                          | Define services, volumes, ports                   |
| **Custom VPC, Subnets, SGs**                    | Control networking & security                                               | Run Beanstalk inside private subnet               |
| **IAM Role Customization**                      | Attach IAM roles to instances                                               | Allow access to S3, CloudWatch, etc.              |
| **Add-ons like RDS**                            | Add database with Elastic Beanstalk app                                     | Create a full-stack deployment setup              |


| Pros                 | Cons                                                    |
| -------------------- | ------------------------------------------------------- |
| Fast to deploy       | Less control than raw EC2/Fargate                       |
| Auto handles infra   | Scaling is limited to app-level (not infra granularity) |
| Monitoring + logging | Needs customization for complex deployments             |
| Cost-efficient       | Not good for microservices or heavy container workloads |

✅ TL;DR – Interview-Ready Summary
Elastic Beanstalk is AWS’s PaaS that lets me deploy applications quickly without managing infrastructure.
It’s fully customizable via .ebextensions, custom AMIs, environment variables, and IAM roles.
I’ve used it for Flask and Node.js apps, integrated background workers, customized EC2 instances, and configured Nginx — all while still benefiting from AWS-managed scaling and health monitoring.

 What is Amazon SES (Simple Email Service)?
Amazon SES is a scalable email-sending service for transactional, marketing, and notification emails.

💼 Use Cases:
Send user registration confirmation emails

Forgot password/reset link emails

Marketing campaigns/newsletters

CloudWatch alerts → email notifications

CI/CD pipeline success/failure notifications

🔧 DevOps Perspective:
| Feature                                | Explanation                                       |
| -------------------------------------- | ------------------------------------------------- |
| **SMTP + API access**                  | Use standard email clients or integrate with apps |
| **Email Receiving**                    | You can also receive and route emails             |
| **Domain Verification + DKIM**         | To improve deliverability and avoid spam          |
| **Throttling & Reputation Management** | AWS manages sender reputation                     |
| **IAM policies for sendEmail**         | Restrict which services/users can send mail       |

🧪 Scenario:
You set up SES to send notification emails when a Lambda function fails. You integrate SES via AWS SDK or SMTP from the app backend.

What is Amazon SNS (Simple Notification Service)?
Amazon SNS is a pub/sub messaging service that lets you send notifications/messages to multiple subscribers at once.

💼 Use Cases:
Send alerts from CloudWatch to email, SMS, or Lambda

Notify multiple microservices from a central event

Trigger Lambda functions on application events

Broadcast application status updates

🔧 DevOps Perspective:
| Feature               | Explanation                                                               |
| --------------------- | ------------------------------------------------------------------------- |
| **Topics**            | Central channels that receive messages                                    |
| **Subscribers**       | Services or endpoints that get notified (Email, SMS, Lambda, SQS, HTTP/S) |
| **Fan-out pattern**   | One event → multiple subscribers                                          |
| **High throughput**   | Supports millions of messages per second                                  |
| **Secure publishing** | IAM policies & topic access control                                       |


🧪 Scenario:
You create an SNS topic AppDeploymentAlerts.
You subscribe:

A Lambda function to log the alert

An SQS queue for audit storage

An email address to notify the DevOps team

When a deployment fails, SNS pushes messages to all 3 simultaneously.

| Feature     | Amazon SES                      | Amazon SNS                                      |
| ----------- | ------------------------------- | ----------------------------------------------- |
| Purpose     | Send **email**                  | Send **notifications** to multiple endpoints    |
| Common Use  | Transactional emails, marketing | Cloud alerts, fan-out events                    |
| Protocol    | SMTP / API                      | Email, SMS, Lambda, HTTP, SQS                   |
| DevOps Use  | CI/CD email alerts              | App failure notifications via multiple channels |
| Integration | App SDK, SMTP                   | CloudWatch, Lambda, custom apps                 |



✅ Interview-Ready Answer (DevOps Context)
In my projects, I've primarily worked with IIS (Internet Information Services) as the web server — particularly for hosting .NET Core and WebAPI applications on Windows-based EC2 instances.
I've handled deployments, SSL binding, port configurations, reverse proxy setups (via ARR), and troubleshooting redirect loops or HTTP error codes in IIS.

While IIS has been my primary environment, I'm also familiar with Nginx and Apache conceptually and have interacted with them during containerization and CI/CD workflows.

🧪 Example Scenario from Your Experience
In one scenario, I hosted a 3-tier application in IIS on a Windows Server EC2 instance.
The frontend (Angular) was reverse proxied via IIS to the backend APIs (ASP.NET Core WebAPI).
I managed custom URL rewrites, application pool recycling, and enabled detailed error logging to troubleshoot user issues.

I’ve also worked with bindings for custom domains and SSL certificates using Let’s Encrypt (via win-acme), and automated site deployments using PowerShell and GitHub Actions.

🔁 Bonus: When Did You Interact with Nginx or Apache?
I’ve interacted with Nginx mainly in containerized environments — for example, using it as a reverse proxy for Dockerized Node.js apps.
I understand basic concepts like configuring nginx.conf, setting up location blocks, caching headers, and load balancing with upstream servers.

For Apache, I’ve reviewed .htaccess files when supporting PHP apps or troubleshooting legacy applications during migrations.

| Server     | Experience                                                                    |
| ---------- | ----------------------------------------------------------------------------- |
| **IIS**    | ✔️ Primary experience – hosting .NET apps, reverse proxy, SSL, error handling |
| **Nginx**  | 🤝 Familiar with config, reverse proxy, static serving in Docker              |
| **Apache** | 👀 Basic exposure during troubleshooting/migrations                           |

| Web Server | Main Config File                                                           | Virtual Host Location                                   |
| ---------- | -------------------------------------------------------------------------- | ------------------------------------------------------- |
| **Nginx**  | `/etc/nginx/nginx.conf`                                                    | `/etc/nginx/sites-available/`                           |
| **Apache** | `/etc/apache2/apache2.conf` (Debian) / `/etc/httpd/conf/httpd.conf` (RHEL) | `/etc/apache2/sites-available/` or `/etc/httpd/conf.d/` |



🧠 Commonly Used AWS Databases (Managed Services)

| Database               | Type           | Use Case                    | Key Features                                                            |
| ---------------------- | -------------- | --------------------------- | ----------------------------------------------------------------------- |
| **Amazon RDS**         | Relational     | General SQL-based apps      | Supports MySQL, PostgreSQL, MariaDB, SQL Server, Oracle. Fully managed. |
| **Amazon Aurora**      | Relational     | High performance, scalable  | MySQL- and PostgreSQL-compatible. Faster & more durable than RDS.       |
| **Amazon DynamoDB**    | NoSQL          | Key-value or document store | Serverless, super fast, auto-scaling, low-latency.                      |
| **Amazon ElastiCache** | In-memory      | Caching layer               | Supports Redis and Memcached. For speed boosts.                         |
| **Amazon Redshift**    | Data warehouse | Analytics & BI              | Columnar storage, great for running big queries over big data.          |
| **Amazon DocumentDB**  | NoSQL          | Document-based apps         | MongoDB-compatible, for JSON-like data.                                 |
| **Amazon Neptune**     | Graph          | Graph-based apps            | Social networks, fraud detection, etc.                                  |
| **Amazon Timestream**  | Time series    | Metrics/logs/IoT data       | Optimized for time-stamped data.                                        |
| **Amazon QLDB**        | Ledger DB      | Immutable history           | Auditing, regulatory use cases.                                         |

🛠 As a DevOps Engineer, Here’s What You Should Know
🔧 From CI/CD perspective:
Use RDS or Aurora for most web apps.

Use Secrets Manager or SSM Parameter Store for DB creds in your pipelines.

Automate backups, snapshots, and versioning for DBs via Terraform or Boto3.

Use Data API (Aurora Serverless) to query without opening DB connections.

💸 Cost Optimization Tips:
Turn on auto-stop for dev/test RDS.

Use Aurora Serverless v2 for variable workloads.

Enable storage autoscaling instead of over-provisioning.

Use multi-AZ only in prod unless really needed in dev/test.

DynamoDB on-demand mode is better for spiky traffic.














